/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Behavioural Events from Clients
 */
export interface FeatureEvent {
  canProceed: boolean;
  state?: string;
  mediaType?: "audio" | "video" | "share" | "share_audio" | "whiteboard" | "gamestate";
  csi?: number;
  /**
   * media capability for both transmit and receive
   */
  mediaCapabilities?: {
    /**
     * explicit indication of media capabilities. true=supported
     */
    tx: {
      audio: boolean;
      video: boolean;
      share: boolean;
      share_audio: boolean;
      whiteboard: boolean;
      gamestate?: boolean;
    };
    /**
     * explicit indication of media capabilities. true=supported
     */
    rx: {
      audio: boolean;
      video: boolean;
      share: boolean;
      share_audio: boolean;
      whiteboard: boolean;
      gamestate?: boolean;
    };
  };
  mediaLines?: {
    mediaType: "audio" | "video" | "share" | "share_audio" | "whiteboard" | "gamestate";
    remoteIP?: string;
    localIP?: string;
    localNetworkPrefix?: string;
    localPort?: number;
    remotePort?: number;
    protocol: "udp" | "tcp" | "xtls" | "unknown";
    direction: "sendrecv" | "sendonly" | "recvonly" | "inactive";
    clusterName?: string;
    status?: "succeeded" | "in-progress" | "failed";
    failureReason?: "network" | "transport" | "rejected" | "timeout" | "notstarted" | "succeeded";
    errorCode?: number;
    mediaLineData?: {};
  }[];
  /**
   * allows client to specify media preferences
   */
  clientMediaPreferences?: {
    preferTranscoding: boolean;
  };
  pstnAudioType?: "dial-in" | "dial-out";
  success?: boolean;
  isTranscoded?: boolean;
  isGatewayed?: boolean;
  isComposed?: boolean;
  /**
   * determine how the events are processed as well as how the reports are aggregated and sliced
   */
  registrationMode?: "SIP" | "Cloud" | "CloudAware";
  /**
   * protocols used to help determine how the events are processed as well as how the reports are aggregated and sliced
   */
  protocol?: "SIP" | "H323" | "Locus" | "WebRTC";
  /**
   * The underlying service provider of the call.
   */
  meetingPlatform?: "MsTeams" | "GoogleMeet" | "Zoom" | "Webex";
  labels?: string[];
  webexServiceType?: "MC" | "EC" | "SC" | "TC" | "AA" | "RA" | "NBR" | "WRF" | "HOL";
  /**
   * this defines the sub service type
   */
  webexSubServiceType?: "PMR" | "Event" | "Training" | "ScheduleMeeting" | "ScheduledMeeting" | "Webinar" | "others";
  ivrDialogType?:
    | "MEDIA_ON_HOLD"
    | "ANNOUNCEMENT"
    | "TONE"
    | "COLLECT_PIN"
    | "PROMPT"
    | "MEDIA_SERVICE_AGENT"
    | "COLLECT";
  ivrDialogResult?:
    | "SUCCESS"
    | "FAILURE"
    | "HOST_PIN_MATCH"
    | "GUEST_PIN_MATCH"
    | "PANELIST_PIN_MATCH"
    | "NO_MATCH"
    | "INVALID_PIN";
  callType?:
    | "VIDEO_DIALIN"
    | "VIDEO_DIALOUT"
    | "CASCADE"
    | "HYBRID_CASCADE"
    | "PSTN_SIP"
    | "PSTN_DIALIN"
    | "PSTN_DIALOUT"
    | "PSTN_ONLY_DIALIN"
    | "PSTN_ONLY_DIALOUT"
    | "H323"
    | "H323_IP"
    | "SIP_ENTERPRISE"
    | "SIP_MOBILE"
    | "SIP_NATIONAL"
    | "SIP_INTERNATIONAL"
    | "SIP_EMERGENCY"
    | "SIP_OPERATOR"
    | "SIP_SHORTCODE"
    | "SIP_TOLLFREE"
    | "SIP_PREMIUM"
    | "SIP_URI"
    | "SIP_INBOUND"
    | "UNKNOWN"
    | "ZTM"
    | "SIP_MEETING";
  eventData?: {};
  derivedSipClientType?:
    | "SIP_CE_SINGLE_SCREEN"
    | "SIP_CE_MULTI_SCREEN"
    | "SIP_JABBER"
    | "SIP_TIP_SINGLE_SCREEN"
    | "SIP_TIP_THREE_SCREEN"
    | "SIP_PSTN"
    | "SIP_OTHER"
    | "SIP_WEBEX_CASCADE"
    | "SIP_NONE";
  /**
   * this defines the major client types
   */
  derivedClientType?:
    | "MEETING_CENTER"
    | "EVENT_CENTER"
    | "TRAINING_CENTER"
    | "TEAMS_CLIENT"
    | "TEAMS_DEVICE"
    | "TEAMS_SHARE"
    | "SIP"
    | "RECORDING"
    | "CLOUD_AWARE_SIP"
    | "TEAMS_WXC_CLIENT"
    | "WXC_CLIENT"
    | "WXC_DEVICE"
    | "WEBEX_JS_SDK"
    | "VOICEA_CLIENT"
    | "CISCO_SIP_GW"
    | "WEBEX_SDK"
    | "CPAAS_THIRD_PARTY_SDK"
    | "WXC_THIRD_PARTY";
  /**
   * this defines the sub types of clients
   */
  derivedSubClientType?:
    | "DESKTOP_APP"
    | "DESKTOP_APP_VDI"
    | "DEVICE_CURRENT"
    | "DEVICE_LEGACY_2020"
    | "HVDI_APP"
    | "MOBILE_APP"
    | "VDI_APP"
    | "WEB_APP"
    | "MOBILE_NETWORK"
    | "HOLOGRAM_HEADSET_APP";
  serverRole?:
    | "CONFERENCE"
    | "TRANSCODER"
    | "WHITEBOARD_INJECTOR"
    | "MS_TEAMS_CONFERENCE"
    | "RECORDING"
    | "GATEWAY"
    | "GATEWAY_CLIENT_SIDE"
    | "UNKNOWN"
    | "HOLOGRAM_RENDER";
  reconnect?: boolean;
  retryCount?: number;
  meetSimple?: boolean;
  /**
   * represents media quality status report such as no media or drop out
   */
  mediaStatus?: {
    mediaType?: "audio" | "video" | "share" | "share_audio" | "whiteboard";
    mediaSuccess?: boolean;
    shareType?:
      | "cb-normal-share"
      | "ce-airplay-share"
      | "ce-direct-share"
      | "ce-gui-loopback-share"
      | "ce-input-source-share"
      | "ce-input-source-share-hdmi"
      | "ce-input-source-share-usbc"
      | "ce-jpg-share"
      | "ce-miracast-share"
      | "mcs-normal-share"
      | "mcs-normal-audio-share"
      | "mcs-hfps-share"
      | "mcs-hfps-audio-share";
    isTransmitter?: boolean;
    audioJoinType?:
      | "phone-call-in"
      | "phone-call-back"
      | "voip"
      | "device-call-back"
      | "never-join-audio"
      | "tried-but-never-join";
    /**
     * indicates transport type used
     */
    transportType?: "UDP" | "TCP" | "xTLS" | "TLS";
    additionalData?: {};
  };
  shareInstanceId?: string;
  hologramStreamId?: string;
  /**
   * represents all of the properities that could cause delay during media setup process.
   */
  audioSetupDelay?: {
    floorReqSentReceived?: number;
    floorRespSentReceived?: number;
    mediaType?: "audio" | "video" | "share" | "share_audio" | "whiteboard";
    txReqFloorGranted?: number;
    txSessionCreateConfirm?: number;
    txApeEnrollConfirm?: number;
    txUIDelay?: number;
    txScreenCaptureDelay?: number;
    txScreenCaptureDelayReasonCode?: number;
    txShareStartOverallDelay?: number;
    rx1stPacket2RenderDelay?: number;
    rxGranted2RenderDelay?: number;
    rxFailFrameNumB4Success?: number;
    e2eFirstFrameDelay?: number;
    CBSessionRespToLocusFloorGrantDelay?: number;
    CBShareReceiveToServerShareTransmitDelay?: number;
    CBShareReceiveToTPGWFirstKeyFrameDelay?: number;
    TPGWFirstKeyFrameToServerShareTransmitDelay?: number;
    MCSSessionActivateToLocusFloorGrantDelay?: number;
    ServerShareInitiateToLocusFloorGrantDelay?: number;
    LocusFloorGrantToCBSessionStartDelay?: number;
    ServerShareReceiveToTPGWFirstKeyFrameDelay?: number;
    LocusFloorGrantToTPGWFloorGrantDelay?: number;
    LocusFloorGrantToReceiverNotificationDelay?: number;
    CBShareSessionRespDelay?: number;
    LocusShareFloorGrantRespDelay?: number;
    ServerShareFloorGrantRespDelay?: number;
    joinRespRxStart?: number;
    joinRespTxStart?: number;
    maxRemoteLossRate?: number;
    media2SignalDelay?: number;
    warholDownloadTime?: number;
    contentDownloadTime?: number;
    boardCreationTime?: number;
    totalBoardServiceRespDelay?: number;
  };
  /**
   * represents all of the properities that could cause delay during media setup process.
   */
  videoSetupDelay?: {
    floorReqSentReceived?: number;
    floorRespSentReceived?: number;
    mediaType?: "audio" | "video" | "share" | "share_audio" | "whiteboard";
    txReqFloorGranted?: number;
    txSessionCreateConfirm?: number;
    txApeEnrollConfirm?: number;
    txUIDelay?: number;
    txScreenCaptureDelay?: number;
    txScreenCaptureDelayReasonCode?: number;
    txShareStartOverallDelay?: number;
    rx1stPacket2RenderDelay?: number;
    rxGranted2RenderDelay?: number;
    rxFailFrameNumB4Success?: number;
    e2eFirstFrameDelay?: number;
    CBSessionRespToLocusFloorGrantDelay?: number;
    CBShareReceiveToServerShareTransmitDelay?: number;
    CBShareReceiveToTPGWFirstKeyFrameDelay?: number;
    TPGWFirstKeyFrameToServerShareTransmitDelay?: number;
    MCSSessionActivateToLocusFloorGrantDelay?: number;
    ServerShareInitiateToLocusFloorGrantDelay?: number;
    LocusFloorGrantToCBSessionStartDelay?: number;
    ServerShareReceiveToTPGWFirstKeyFrameDelay?: number;
    LocusFloorGrantToTPGWFloorGrantDelay?: number;
    LocusFloorGrantToReceiverNotificationDelay?: number;
    CBShareSessionRespDelay?: number;
    LocusShareFloorGrantRespDelay?: number;
    ServerShareFloorGrantRespDelay?: number;
    joinRespRxStart?: number;
    joinRespTxStart?: number;
    maxRemoteLossRate?: number;
    media2SignalDelay?: number;
    warholDownloadTime?: number;
    contentDownloadTime?: number;
    boardCreationTime?: number;
    totalBoardServiceRespDelay?: number;
  };
  /**
   * represents all of the properities that could cause delay during media setup process.
   */
  shareSetupDelay?: {
    floorReqSentReceived?: number;
    floorRespSentReceived?: number;
    mediaType?: "audio" | "video" | "share" | "share_audio" | "whiteboard";
    txReqFloorGranted?: number;
    txSessionCreateConfirm?: number;
    txApeEnrollConfirm?: number;
    txUIDelay?: number;
    txScreenCaptureDelay?: number;
    txScreenCaptureDelayReasonCode?: number;
    txShareStartOverallDelay?: number;
    rx1stPacket2RenderDelay?: number;
    rxGranted2RenderDelay?: number;
    rxFailFrameNumB4Success?: number;
    e2eFirstFrameDelay?: number;
    CBSessionRespToLocusFloorGrantDelay?: number;
    CBShareReceiveToServerShareTransmitDelay?: number;
    CBShareReceiveToTPGWFirstKeyFrameDelay?: number;
    TPGWFirstKeyFrameToServerShareTransmitDelay?: number;
    MCSSessionActivateToLocusFloorGrantDelay?: number;
    ServerShareInitiateToLocusFloorGrantDelay?: number;
    LocusFloorGrantToCBSessionStartDelay?: number;
    ServerShareReceiveToTPGWFirstKeyFrameDelay?: number;
    LocusFloorGrantToTPGWFloorGrantDelay?: number;
    LocusFloorGrantToReceiverNotificationDelay?: number;
    CBShareSessionRespDelay?: number;
    LocusShareFloorGrantRespDelay?: number;
    ServerShareFloorGrantRespDelay?: number;
    joinRespRxStart?: number;
    joinRespTxStart?: number;
    maxRemoteLossRate?: number;
    media2SignalDelay?: number;
    warholDownloadTime?: number;
    contentDownloadTime?: number;
    boardCreationTime?: number;
    totalBoardServiceRespDelay?: number;
  };
  /**
   * represents all of the properities that could cause delay during media setup process.
   */
  shareAudioSetupDelay?: {
    floorReqSentReceived?: number;
    floorRespSentReceived?: number;
    mediaType?: "audio" | "video" | "share" | "share_audio" | "whiteboard";
    txReqFloorGranted?: number;
    txSessionCreateConfirm?: number;
    txApeEnrollConfirm?: number;
    txUIDelay?: number;
    txScreenCaptureDelay?: number;
    txScreenCaptureDelayReasonCode?: number;
    txShareStartOverallDelay?: number;
    rx1stPacket2RenderDelay?: number;
    rxGranted2RenderDelay?: number;
    rxFailFrameNumB4Success?: number;
    e2eFirstFrameDelay?: number;
    CBSessionRespToLocusFloorGrantDelay?: number;
    CBShareReceiveToServerShareTransmitDelay?: number;
    CBShareReceiveToTPGWFirstKeyFrameDelay?: number;
    TPGWFirstKeyFrameToServerShareTransmitDelay?: number;
    MCSSessionActivateToLocusFloorGrantDelay?: number;
    ServerShareInitiateToLocusFloorGrantDelay?: number;
    LocusFloorGrantToCBSessionStartDelay?: number;
    ServerShareReceiveToTPGWFirstKeyFrameDelay?: number;
    LocusFloorGrantToTPGWFloorGrantDelay?: number;
    LocusFloorGrantToReceiverNotificationDelay?: number;
    CBShareSessionRespDelay?: number;
    LocusShareFloorGrantRespDelay?: number;
    ServerShareFloorGrantRespDelay?: number;
    joinRespRxStart?: number;
    joinRespTxStart?: number;
    maxRemoteLossRate?: number;
    media2SignalDelay?: number;
    warholDownloadTime?: number;
    contentDownloadTime?: number;
    boardCreationTime?: number;
    totalBoardServiceRespDelay?: number;
  };
  /**
   * represents all of the properities that could cause delay during media setup process.
   */
  whiteboardSetupDelay?: {
    floorReqSentReceived?: number;
    floorRespSentReceived?: number;
    mediaType?: "audio" | "video" | "share" | "share_audio" | "whiteboard";
    txReqFloorGranted?: number;
    txSessionCreateConfirm?: number;
    txApeEnrollConfirm?: number;
    txUIDelay?: number;
    txScreenCaptureDelay?: number;
    txScreenCaptureDelayReasonCode?: number;
    txShareStartOverallDelay?: number;
    rx1stPacket2RenderDelay?: number;
    rxGranted2RenderDelay?: number;
    rxFailFrameNumB4Success?: number;
    e2eFirstFrameDelay?: number;
    CBSessionRespToLocusFloorGrantDelay?: number;
    CBShareReceiveToServerShareTransmitDelay?: number;
    CBShareReceiveToTPGWFirstKeyFrameDelay?: number;
    TPGWFirstKeyFrameToServerShareTransmitDelay?: number;
    MCSSessionActivateToLocusFloorGrantDelay?: number;
    ServerShareInitiateToLocusFloorGrantDelay?: number;
    LocusFloorGrantToCBSessionStartDelay?: number;
    ServerShareReceiveToTPGWFirstKeyFrameDelay?: number;
    LocusFloorGrantToTPGWFloorGrantDelay?: number;
    LocusFloorGrantToReceiverNotificationDelay?: number;
    CBShareSessionRespDelay?: number;
    LocusShareFloorGrantRespDelay?: number;
    ServerShareFloorGrantRespDelay?: number;
    joinRespRxStart?: number;
    joinRespTxStart?: number;
    maxRemoteLossRate?: number;
    media2SignalDelay?: number;
    warholDownloadTime?: number;
    contentDownloadTime?: number;
    boardCreationTime?: number;
    totalBoardServiceRespDelay?: number;
  };
  isFocus?: boolean;
  processingDelay?: number;
  shareType?:
    | "cb-normal-share"
    | "ce-airplay-share"
    | "ce-direct-share"
    | "ce-gui-loopback-share"
    | "ce-input-source-share"
    | "ce-input-source-share-hdmi"
    | "ce-input-source-share-usbc"
    | "ce-jpg-share"
    | "ce-miracast-share"
    | "mcs-normal-share"
    | "mcs-normal-audio-share"
    | "mcs-hfps-share"
    | "mcs-hfps-audio-share";
  isShareBeingTakenOver?: boolean;
  floorBeneficiaryUpdated?: boolean;
  meetingJoinedTime?: string;
  meetingScheduledTime?: string;
  e2eeKeyEpoch?: number;
  e2eeDecompressRatio?: number;
  keyResponses?: {
    gotKeyTime?: number;
    useKeyTime?: number;
    cacheKeyTime?: number;
  }[];
  e2eeVersion?: "E2EEV1" | "E2EEV2" | "E2EEV3";
  isConvergedArchitectureEnabled?: boolean;
  callingServiceType?: "CUCM" | "WEBEXCALLING" | "BROADWORKS" | "LOCUS";
  inLobby?: boolean;
  isVIPMeeting?: boolean;
  webexAppEntrypoint?: string;
  firstParticipant?: boolean;
  isImmersiveShare?: boolean;
  /**
   * Request/Response Time for Internal Services
   */
  registeredTimestamps?: {
    locusCreateConfluenceRequestTime?: string;
    locusCreateConfluenceResponseTime?: string;
    locusCreateVenueRequestTime?: string;
    locusCreateVenueResponseTime?: string;
  };
  skipInterstitialWindow?: boolean;
  callDurationSecs?: number;
  /**
   * Details associated with a breakout move
   */
  breakout?: {
    moveType?: "between_breakout" | "to_breakout" | "to_main";
    trigger?: "assignment_changed" | "client_initiated" | "session_ended" | "session_started";
    startState?: "joined" | "lobby";
    endState?: "joined" | "lobby";
  };
  /**
   * Latency values associated with breakout session
   */
  breakoutLatency?: {
    boBreakoutMoveProcessed?: number;
    boBreakoutMoveResp?: number;
    boLocusBreakoutMoveResp?: number;
    locusBreakoutMoveResp?: number;
    orpheusConfluenceMoveReqResp?: number;
  };
  /**
   * two-way whiteboard related info
   */
  whiteboard?: {
    action?: "open" | "create";
    type?: "whiteboard" | "annotation";
    capability?: "one_way" | "two_way";
    granted?: "one_way" | "two_way";
  };
  /**
   * ROAP message details
   */
  roap?: {
    type?:
      | "ANSWER"
      | "ERROR"
      | "OFFER"
      | "OFFER_REQUEST"
      | "OFFER_RESPONSE"
      | "OK"
      | "TURN_DISCOVERY_REQUEST"
      | "TURN_DISCOVERY_RESPONSE";
    messageType?:
      | "ANSWER"
      | "ERROR"
      | "OFFER"
      | "OFFER_REQUEST"
      | "OFFER_RESPONSE"
      | "OK"
      | "TURN_DISCOVERY_REQUEST"
      | "TURN_DISCOVERY_RESPONSE";
    error?: string;
    duration?: number;
  };
  name:
    | "client.feature.audio.noise.removal"
    | "client.feature.embedded-object-info"
    | "client.feature.gesture.recognition"
    | "client.feature.meeting.breakout-session.action"
    | "client.feature.meeting.breakout-session.summary"
    | "client.feature.meeting.download.summary"
    | "client.feature.meeting.people-insights.check.response"
    | "client.feature.meeting.people-insights.query.response"
    | "client.feature.meeting.problem-report.submit"
    | "client.feature.meeting.summary"
    | "client.feature.meeting.teams.launch"
    | "client.feature.meeting.user-action"
    | "client.feature.mta.launched"
    | "client.feature.report"
    | "client.feature.vdi.collect.thinclient.log";
  /**
   * Base type for the various identifiers used to connect the dots.
   * In general, these should be populated whenever possible. Subtypes may make a particular key required.
   *
   */
  identifiers: {
    attendeeId?: string;
    breakoutGroupId?: string;
    breakoutMoveId?: string;
    breakoutSessionId?: string;
    confluenceId?: string;
    /**
     * Set of identifiers dedicated to CPaaS clients
     * In general, these should be populated whenever possible. Subtypes may make a particular key required.
     *
     */
    cpaasIdentifiers?: {
      imiTenantId: string;
      devClientId: string;
      imiServiceId: string;
      imiAppId: string;
      sessionId: string;
      sessionInstanceId: string;
    };
    csdmDeviceUrl?: string;
    destinationBreakoutSessionId?: string;
    destinationLocusSessionId?: string;
    destinationLocusUrl?: string;
    destinationVenueId?: string;
    deviceId?: string;
    ivrCallId?: string;
    ivrDialogId?: string;
    ivrId?: string;
    locusId?: string;
    locusSessionId?: string;
    locusStartTime?: string;
    locusUrl?: string;
    mediaAgentAlias?: string;
    mediaAgentGroupId?: string;
    meetClusterName?: string;
    meetingLookupUrl?: string;
    meetingOrgId?: string;
    msteamsTenantGuid?: string;
    msteamsConferenceId?: string;
    oauth2ClientId?: string;
    orgId?: string;
    roomId?: string;
    sipCallId?: string;
    sipSessionId?: {
      local?: string;
      remote?: string;
    };
    sipUri?: string;
    subConfId?: string;
    tenantId?: string;
    trackingId?: string;
    userId?: string;
    venueId?: string;
    venueUrl?: string;
    whiteboardUrl?: string;
    webexConferenceId?: number;
    webexClusterName?: string;
    webexConferenceIdStr?: string;
    webexDataCenter?: string;
    webexGuestId?: number;
    webexMeetingId?: number;
    webexNodeId?: number;
    webexSiteId?: number;
    webexSiteName?: string;
    webexUserId?: number;
    webexWebDomain?: string;
    correlationId: string;
  };
  trigger?: "user-interaction";
  errors?: {
    fatal: boolean;
    category: "signaling" | "media" | "other" | "expected";
    errorDescription?: string;
    errorCode?: number;
    errorCodeStr?: string;
    httpCode?: number;
    errorData?: {};
    shownToUser: boolean;
    serviceErrorCode?: number;
    name:
      | "media-engine"
      | "ice.failed"
      | "locus.response"
      | "locus.leave"
      | "client.leave"
      | "media-device"
      | "media-sca"
      | "other";
  }[];
  pairingState?: "paired" | "observing" | "challenging";
  userType?: "host" | "attendee" | "cohost" | "panelist";
  updateType?: "new-user" | "update-user" | "return-user";
  isFirstTimeUser?: boolean;
  /**
   * Details of server environment
   */
  serverInfo?: {
    serverType:
      | "CB"
      | "CMS"
      | "HESIOD"
      | "LINUS"
      | "MCC"
      | "MCS"
      | "MES"
      | "MJS"
      | "MRS"
      | "MYGDONUS"
      | "MZM"
      | "TERMINUS"
      | "TPGW"
      | "TA"
      | "HOMER"
      | "SUPERHOMER"
      | "U2C"
      | "WCA"
      | "MSE"
      | "UNKNOWN";
    serverAddress?: string;
  };
  /**
   * Details of breakout session information, sent after end of breakout session
   */
  breakoutSessionSummaryInfo?: {
    duration: number;
    subConferenceCount: number;
    totalAttendeeCount: number;
    participantCount: number;
    assignedparticipantCount: number;
    cohostCount: number;
    averageAttendeeCountPerSubConference: number;
    totalHostJoinedCount: number;
    isBoStarted: boolean;
    isBoEnabled: boolean;
    isPreAssigned: boolean;
    boStartedTimers: number;
    createType: "pre-meeting" | "in-meeting";
    enableType: "pre-meeting" | "in-meeting";
  };
  /**
   * Details of meeting summary information
   */
  meetingSummaryInfo?: {
    featureReportSummary?: {
      featureName: unknown;
      usage: boolean;
      usageDuration?: number;
      toggle: boolean;
      clickCount: number;
      isMachineSupport: boolean;
    }[];
    featureActionSummary?: {
      featureName: unknown;
      featureActions: unknown[];
    }[];
    featureEventSummary?: {
      featureName: unknown;
      featureEvents: unknown[];
    }[];
    /**
     * Details of MeetingInfo.
     */
    meetingInfo?: {
      simultaneousMeetingCount?: number;
      totalBreakoutSessionCount?: number;
      totalAttendeeCount?: number;
      currentUserCountWhenLeaving?: number;
      isE2EEnable?: boolean;
      isModernE2EEnable?: boolean;
      isWbxTraceOverWrite?: boolean;
      isAnonymousMeeting?: boolean;
      serverCipher?: string;
      mediaCipher?: string;
    };
    /**
     * Details of SurveyInfo.
     */
    surveyInfo?: {
      surveyCount: number;
      surveyLocalClientVersion?: string;
      surveyDate?: string;
    };
    languageType?:
      | "lan_af"
      | "lan_sq"
      | "lan_am"
      | "lan_ar"
      | "lan_hy"
      | "lan_az"
      | "lan_eu"
      | "lan_be"
      | "lan_bn"
      | "lan_bs"
      | "lan_bg"
      | "lan_ca"
      | "lan_ceb"
      | "lan_zh"
      | "lan_zh-TW"
      | "lan_co"
      | "lan_hr"
      | "lan_cs"
      | "lan_da"
      | "lan_nl"
      | "lan_en"
      | "lan_en-GB"
      | "lan_eo"
      | "lan_et"
      | "lan_fi"
      | "lan_fr"
      | "lan_fr-CA"
      | "lan_fy"
      | "lan_gl"
      | "lan_ka"
      | "lan_de"
      | "lan_el"
      | "lan_gu"
      | "lan_ht"
      | "lan_ha"
      | "lan_haw"
      | "lan_he"
      | "lan_hi"
      | "lan_hmn"
      | "lan_hu"
      | "lan_is"
      | "lan_ig"
      | "lan_id"
      | "lan_ga"
      | "lan_it"
      | "lan_ja"
      | "lan_jv"
      | "lan_kn"
      | "lan_kk"
      | "lan_km"
      | "lan_rw"
      | "lan_ko"
      | "lan_ku"
      | "lan_ky"
      | "lan_lo"
      | "lan_la"
      | "lan_lv"
      | "lan_lt"
      | "lan_lb"
      | "lan_mk"
      | "lan_mg"
      | "lan_ms"
      | "lan_ml"
      | "lan_mt"
      | "lan_mi"
      | "lan_mr"
      | "lan_mn"
      | "lan_my"
      | "lan_ne"
      | "lan_no"
      | "lan_ny"
      | "lan_or"
      | "lan_ps"
      | "lan_fa"
      | "lan_pl"
      | "lan_pt"
      | "lan_pa"
      | "lan_ro"
      | "lan_ru"
      | "lan_sm"
      | "lan_gd"
      | "lan_sr"
      | "lan_st"
      | "lan_sn"
      | "lan_sd"
      | "lan_si"
      | "lan_sk"
      | "lan_sl"
      | "lan_so"
      | "lan_es"
      | "lan_es-ES"
      | "lan_su"
      | "lan_sw"
      | "lan_sv"
      | "lan_tl"
      | "lan_tg"
      | "lan_ta"
      | "lan_tt"
      | "lan_te"
      | "lan_th"
      | "lan_tr"
      | "lan_tk"
      | "lan_uk"
      | "lan_ur"
      | "lan_ug"
      | "lan_uz"
      | "lan_vi"
      | "lan_cy"
      | "lan_xh"
      | "lan_yi"
      | "lan_yo"
      | "lan_zu";
  };
  /**
   * Audio background noise removal
   */
  audioNoiseRemoval?: {
    /**
     * background noise removal action data
     */
    actionData?: {
      bnrActionType: "turn-on-bnr" | "turn-off-bnr";
    };
    /**
     * background noise removal event data
     */
    eventData?: {
      bnrEventType: "bnr-on" | "bnr-off";
    };
  };
  /**
   * Details of client action
   */
  gestureRecognition?: {
    supportedMachine?: boolean;
    gestureType?: "clap" | "none" | "raiseHand" | "thumpUp" | "thumbDown";
    duration?: number;
  };
  /**
   * post meeting hook report
   */
  postMeetingHook?: {
    /**
     * data define for background noise removal action
     */
    actionData?: {
      pmhActionType: "share" | "view-details" | "close";
      pmhActionResult?: string;
    };
    /**
     * data define for background noise removal event
     */
    eventData?: {
      pmhEventType: "used" | "not-show-again";
    };
  };
  /**
   * Details of problem report information
   */
  problemReportInfo?: {
    logId: string;
    fileSize: number;
    uploadStage: "connect" | "upload";
    collectWMETime?: number;
    collectTopicTime?: number;
    collectSystemInfoTime?: number;
    collectMeetingDataTime?: number;
    collectDumpTime?: number;
    collectCPUTime?: number;
    zipTime?: number;
    connectTime?: number;
    uploadTime?: number;
    totalTime?: number;
    uploadErrorMessage?: string;
  };
  /**
   * Details of breakout session information
   */
  breakoutSessionInfo?: {
    breakoutSessionAction:
      | "add"
      | "assign"
      | "ask-for-help"
      | "breakout-session-open"
      | "breakout-session-close"
      | "breakout-session-mute-all"
      | "breakout-session-unmute-all"
      | "broadcast-open"
      | "broadcast-send"
      | "cancel-automatic-close"
      | "create"
      | "delete"
      | "disable"
      | "dynamic-assign"
      | "dynamic-exchange"
      | "end"
      | "enable"
      | "exchange"
      | "join"
      | "leave"
      | "lock-all-sessions"
      | "lock-this-sessions"
      | "moveto"
      | "mute-all"
      | "mute-all-set"
      | "recreate"
      | "remove"
      | "rename"
      | "search"
      | "select-all"
      | "show-all-sessions"
      | "start"
      | "unmute-all"
      | "unlock-all-sessions"
      | "unlock-this-sessions"
      | "allow-leave-session"
      | "allow-join-session-later"
      | "auto-end-sessions"
      | "time-before-leave-session";
    breakoutSessionJoinType?: "any-one-can-join" | "auto" | "manual" | "preassign-rest";
    breakoutSessionActionClickFrom?:
      | "actionbar"
      | "assign-dialog"
      | "auto"
      | "breakout-session-list"
      | "contextmenu"
      | "menu"
      | "plist"
      | "popup-dialog";
    broadcastSendType?:
      | "all-sessions-all-participants"
      | "all-sessions-all-cohost-and-presenters"
      | "one-session-all-participants"
      | "one-session-one-participant";
    breakoutSessionDialogOpenTime?: number;
    breakoutSessionDialogAssignTime?: number;
  };
  /**
   * call embedded browser object result, if failed, will populate error at Error item
   */
  embeddedBrowserObject?: {
    browserType: "IE" | "WebView2";
    version?: string;
    callFrom?: string;
  };
  /**
   * TeamsLaunchWebexMeeting report
   */
  teamsLaunchWebexMeeting?: {
    /**
     * data define for TeamsLaunchWebexMeeting event
     */
    eventData?: {
      tlmEevntType: "sync-preference" | "sip-call-launch" | "skip-interstitial" | "ipc-ready" | "ipc-failed";
      ipcConnectTime?: number;
    };
    /**
     * data define for TeamsLaunchWebexMeeting action
     */
    actionData?: {
      tlmActionType: "change-audio" | "change-video";
    };
    /**
     * data define for TeamsLaunchWebexMeeting data from
     */
    dataFrom?: {
      tlmFromType: "webex-meeting" | "webex-teams";
    };
  };
  /**
   * Details of language action
   */
  languageActionInfo?: {
    languageAction:
      | "openLanguageDialog"
      | "subscribeTransLanguage"
      | "unsubscribeTransLanguage"
      | "changeSpeakLanguage"
      | "transcriptTurnOnWebexAssistantDialog"
      | "transcriptTurnOffWebexAssistantDialog"
      | "transcriptTurnOnWebexAssistantMenu"
      | "transcriptTurn0ffWebexAssistantMenu"
      | "transcriptViewHighlightPanel"
      | "transcriptViewHighlightPanelViaCloseCaption"
      | "transcriptViewHighlightPanelViaPanelOption"
      | "transcriptViewHighlightPanelViaWebexAssistant"
      | "transcriptEnableCloseCaptionDialog"
      | "transcriptDisableCloseCaptionDialog"
      | "transcriptDisableCloseCaptionDialogForActiveCCOpen"
      | "transcriptDisableCloseCaptionDialogViaCCButton"
      | "transcriptDisableCloseCaptionDialogViaCCDialog"
      | "transcriptEnableCloseCaptionMenu"
      | "transcriptDisableCloseCaptionMenu"
      | "transcriptTabToCaptions"
      | "transcriptTabToHighlights"
      | "transcriptCreateHighlight"
      | "transcriptDeleteHighlightInHighlight"
      | "transcriptDeleteHighlightInCaptions"
      | "transcriptChangeFontSize"
      | "transcriptBackToDefaultPosition"
      | "transcriptChangeModeToDark"
      | "transcriptChangeModeToLight";
    fromLanguage?:
      | "lan_af"
      | "lan_sq"
      | "lan_am"
      | "lan_ar"
      | "lan_hy"
      | "lan_az"
      | "lan_eu"
      | "lan_be"
      | "lan_bn"
      | "lan_bs"
      | "lan_bg"
      | "lan_ca"
      | "lan_ceb"
      | "lan_zh"
      | "lan_zh-TW"
      | "lan_co"
      | "lan_hr"
      | "lan_cs"
      | "lan_da"
      | "lan_nl"
      | "lan_en"
      | "lan_en-GB"
      | "lan_eo"
      | "lan_et"
      | "lan_fi"
      | "lan_fr"
      | "lan_fr-CA"
      | "lan_fy"
      | "lan_gl"
      | "lan_ka"
      | "lan_de"
      | "lan_el"
      | "lan_gu"
      | "lan_ht"
      | "lan_ha"
      | "lan_haw"
      | "lan_he"
      | "lan_hi"
      | "lan_hmn"
      | "lan_hu"
      | "lan_is"
      | "lan_ig"
      | "lan_id"
      | "lan_ga"
      | "lan_it"
      | "lan_ja"
      | "lan_jv"
      | "lan_kn"
      | "lan_kk"
      | "lan_km"
      | "lan_rw"
      | "lan_ko"
      | "lan_ku"
      | "lan_ky"
      | "lan_lo"
      | "lan_la"
      | "lan_lv"
      | "lan_lt"
      | "lan_lb"
      | "lan_mk"
      | "lan_mg"
      | "lan_ms"
      | "lan_ml"
      | "lan_mt"
      | "lan_mi"
      | "lan_mr"
      | "lan_mn"
      | "lan_my"
      | "lan_ne"
      | "lan_no"
      | "lan_ny"
      | "lan_or"
      | "lan_ps"
      | "lan_fa"
      | "lan_pl"
      | "lan_pt"
      | "lan_pa"
      | "lan_ro"
      | "lan_ru"
      | "lan_sm"
      | "lan_gd"
      | "lan_sr"
      | "lan_st"
      | "lan_sn"
      | "lan_sd"
      | "lan_si"
      | "lan_sk"
      | "lan_sl"
      | "lan_so"
      | "lan_es"
      | "lan_es-ES"
      | "lan_su"
      | "lan_sw"
      | "lan_sv"
      | "lan_tl"
      | "lan_tg"
      | "lan_ta"
      | "lan_tt"
      | "lan_te"
      | "lan_th"
      | "lan_tr"
      | "lan_tk"
      | "lan_uk"
      | "lan_ur"
      | "lan_ug"
      | "lan_uz"
      | "lan_vi"
      | "lan_cy"
      | "lan_xh"
      | "lan_yi"
      | "lan_yo"
      | "lan_zu";
    toLanguage?:
      | "lan_af"
      | "lan_sq"
      | "lan_am"
      | "lan_ar"
      | "lan_hy"
      | "lan_az"
      | "lan_eu"
      | "lan_be"
      | "lan_bn"
      | "lan_bs"
      | "lan_bg"
      | "lan_ca"
      | "lan_ceb"
      | "lan_zh"
      | "lan_zh-TW"
      | "lan_co"
      | "lan_hr"
      | "lan_cs"
      | "lan_da"
      | "lan_nl"
      | "lan_en"
      | "lan_en-GB"
      | "lan_eo"
      | "lan_et"
      | "lan_fi"
      | "lan_fr"
      | "lan_fr-CA"
      | "lan_fy"
      | "lan_gl"
      | "lan_ka"
      | "lan_de"
      | "lan_el"
      | "lan_gu"
      | "lan_ht"
      | "lan_ha"
      | "lan_haw"
      | "lan_he"
      | "lan_hi"
      | "lan_hmn"
      | "lan_hu"
      | "lan_is"
      | "lan_ig"
      | "lan_id"
      | "lan_ga"
      | "lan_it"
      | "lan_ja"
      | "lan_jv"
      | "lan_kn"
      | "lan_kk"
      | "lan_km"
      | "lan_rw"
      | "lan_ko"
      | "lan_ku"
      | "lan_ky"
      | "lan_lo"
      | "lan_la"
      | "lan_lv"
      | "lan_lt"
      | "lan_lb"
      | "lan_mk"
      | "lan_mg"
      | "lan_ms"
      | "lan_ml"
      | "lan_mt"
      | "lan_mi"
      | "lan_mr"
      | "lan_mn"
      | "lan_my"
      | "lan_ne"
      | "lan_no"
      | "lan_ny"
      | "lan_or"
      | "lan_ps"
      | "lan_fa"
      | "lan_pl"
      | "lan_pt"
      | "lan_pa"
      | "lan_ro"
      | "lan_ru"
      | "lan_sm"
      | "lan_gd"
      | "lan_sr"
      | "lan_st"
      | "lan_sn"
      | "lan_sd"
      | "lan_si"
      | "lan_sk"
      | "lan_sl"
      | "lan_so"
      | "lan_es"
      | "lan_es-ES"
      | "lan_su"
      | "lan_sw"
      | "lan_sv"
      | "lan_tl"
      | "lan_tg"
      | "lan_ta"
      | "lan_tt"
      | "lan_te"
      | "lan_th"
      | "lan_tr"
      | "lan_tk"
      | "lan_uk"
      | "lan_ur"
      | "lan_ug"
      | "lan_uz"
      | "lan_vi"
      | "lan_cy"
      | "lan_xh"
      | "lan_yi"
      | "lan_yo"
      | "lan_zu";
  };
  /**
   * Details of video action
   */
  videoActionInfo?: {
    videoAction:
      | "switchLayout"
      | "switchPage"
      | "switchActiveUser"
      | "zoomIn"
      | "zoomOut"
      | "pinVideoToStage"
      | "unpinVideoToStage"
      | "syncMyStageForAll"
      | "desyncMyStageForAll"
      | "showParticipantWithoutVideo"
      | "hideParticipantWithoutVideo"
      | "showActiveVideoInStage"
      | "hideActiveVideoInStage"
      | "showActiveVideoWithShareContent"
      | "hideActiveVideoWithShareContent"
      | "showVideoOnTP"
      | "showVideoOnComputer"
      | "EnterFullScreen"
      | "ExitFullScreen"
      | "EnterFullScreenWithShare"
      | "ExitFullScreenWithShare"
      | "hideFilmStrip"
      | "showFilmStrip";
    fromLayoutType?:
      | "stack"
      | "stackWithShare"
      | "sideBySide"
      | "sideBySideWithShare"
      | "grid"
      | "floatingActive"
      | "floatingThumbnail"
      | "floatingGrid"
      | "overlay"
      | "focus"
      | "prominent"
      | "focusWithShare"
      | "prominentWithShare"
      | "equal"
      | "equalWithShare";
    toLayoutType?:
      | "stack"
      | "stackWithShare"
      | "sideBySide"
      | "sideBySideWithShare"
      | "grid"
      | "floatingActive"
      | "floatingThumbnail"
      | "floatingGrid"
      | "overlay"
      | "focus"
      | "prominent"
      | "focusWithShare"
      | "prominentWithShare"
      | "equal"
      | "equalWithShare";
    zoomLayoutType?:
      | "stack"
      | "stackWithShare"
      | "sideBySide"
      | "sideBySideWithShare"
      | "grid"
      | "floatingActive"
      | "floatingThumbnail"
      | "floatingGrid"
      | "overlay"
      | "focus"
      | "prominent"
      | "focusWithShare"
      | "prominentWithShare"
      | "equal"
      | "equalWithShare";
    duration?: number;
    myVideoCSI?: number;
    myNodeID?: number;
    fromActiveNodeID?: number;
    toActiveNodeID?: number;
    switchFromVideoCount?: number;
    switchToVideoCount?: number;
    isSwitchToPrevious?: boolean;
    pinVideoNodeID?: number;
    pinVideoCSI?: number;
    actionFromPlist?: boolean;
    syncStageNodeIDArray?: number[];
    syncStageCSIArray?: number[];
    lockAttendeeStageView?: boolean;
  };
  /**
   * Details of FeatureReport
   */
  featureReport?: {
    featureReportItems: {
      featureName: unknown;
      timeStamp: string;
      actionName?: string;
      eventName?: string;
      duration?: number;
      extValue?: string;
      webappData?: unknown;
      reactionData?: unknown;
      interpretationAction?: unknown;
    }[];
  };
  downloadInfos?: {
    percentCompleted?: number;
    packageName?: string;
    timestamp?: string;
    clientDownloadFileCount?: number;
    clientDownloadSize?: number;
    clientDownloadTime?: number;
    clientDecompressTime?: number;
    CDNEnabled?: boolean;
    updateFlag?: "preMeeting" | "inMeeting" | "postMeeting";
    epSP?: boolean;
    isEPUpdate?: boolean;
    spDifferent?: number;
    spVersionDelta?: number;
    deltaUpdate?: boolean;
    deltaListDownloadTime?: number;
    deltaPackageDownloadTime?: number;
    deltaCachePackageCopyTime?: number;
    deltaApplyTime?: number;
    deltaPackageUncompressTime?: number;
    deltaDuration?: number;
    deltaVersion?: string;
    deltaDownloadFullPackage?: boolean;
    deltaFileSize?: number;
    deltaUpdateEnabled?: boolean;
    deltaFullpackageDownloadEnabled?: boolean;
    deltaUpdateErrorType?: string;
    deltaUpdateSuccess?: string;
    deltaFullpackageDownloadVersion?: string;
    deltaFullpackageDownloadSuccess?: string;
    deltaUpdateCorrelationId?: string;
    deltaFullpackageDownloadCorrelationId?: string;
    deltaTargetVersion?: string;
    deltaLocalFullPackageVersions?: string;
    deltaUpdateFailReason?: string;
    deltaUpdateTimeStamp?: string;
  }[];
}
